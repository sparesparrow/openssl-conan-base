name: Build and Publish OpenSSL Packages

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 6 * * 1" # Weekly rebuild on Monday 6 AM

env:
  CLOUDSMITH_REPO: "sparesparrow-conan/openssl-conan"
  CONAN_VERSION: "2.21.0"

jobs:
  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            profile: linux-gcc11-fips
            arch: x86_64
            fips: true
            shared: false
          - os: ubuntu-22.04
            profile: linux-gcc11
            arch: x86_64
            fips: false
            shared: false
          - os: ubuntu-22.04
            profile: linux-arm64-gcc
            arch: armv8
            fips: false
            shared: false

          # Windows builds
          - os: windows-2022
            profile: windows-msvc193
            arch: x86_64
            fips: false
            shared: false
          - os: windows-2022
            profile: windows-msvc193-shared
            arch: x86_64
            fips: false
            shared: true

          # macOS builds
          - os: macos-13
            profile: macos-arm64
            arch: arm64
            fips: false
            shared: false
          - os: macos-13
            profile: macos-x86_64
            arch: x86_64
            fips: false
            shared: false

    runs-on: ${{ matrix.os }}
    outputs:
      artifacts: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          pip install conan==${{ env.CONAN_VERSION }}
          conan profile detect --force
          
      - name: Validate Conan Profiles
        run: |
          echo "🔍 Validating Conan configuration..."
          conan profile show default
          
          # Verify profile exists for target platform
          if ! conan profile list | grep -q "${{ matrix.profile }}"; then
            echo "❌ Profile ${{ matrix.profile }} not found"
            echo "Available profiles:"
            conan profile list
            exit 1
          fi
          
          echo "✅ Profile ${{ matrix.profile }} validated"
          
      - name: Conan Cache Management
        run: |
          echo "🧹 Managing Conan cache..."
          conan cache path
          
          # Clean old cache entries but keep recent ones
          conan cache clean "*" --source-folder --build-folder --confirm || true
          
          echo "✅ Conan cache prepared"

      - name: Install openssl-tools
        run: |
          git clone https://github.com/sparesparrow/openssl-tools.git
          cd openssl-tools
          conan export . openssl-tools/1.2.0@
          conan config install . -sf extensions -tf extensions

      - name: Build with full_deploy
        run: |
          conan install . \
            --requires="openssl/3.6.0" \
            --profile:all=profiles/${{ matrix.profile }} \
            --build=missing \
            --deployer=full_deploy_enhanced \
            --deployer-folder=./deploy

      - name: Generate SBOM
        run: |
          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Find actual OpenSSL binaries
          echo "🔍 Scanning for OpenSSL binaries..."
          find deploy/full_deploy/ -type f \( -name "*.so*" -o -name "*.dll" -o -name "*.dylib" -o -name "openssl" -o -name "openssl.exe" \) > binary_list.txt
          
          if [ -s binary_list.txt ]; then
            echo "📋 Found OpenSSL binaries:"
            cat binary_list.txt
            # Generate SBOM for each binary
            syft $(cat binary_list.txt) -o cyclonedx-json > deploy/sbom.json
          else
            echo "⚠️ No OpenSSL binaries found, scanning directory structure"
            syft deploy/full_deploy/ -o cyclonedx-json > deploy/sbom.json
          fi
          
          echo "📊 SBOM generated with $(jq '.components | length' deploy/sbom.json) components"

      - name: Create artifact bundle
        id: bundle
        run: |
          cd deploy
          ARTIFACT_NAME="openssl-${{ matrix.profile }}-${{ matrix.arch }}"
          zip -r ../${ARTIFACT_NAME}.zip full_deploy/ sbom.json fips/ 2>/dev/null || zip -r ../${ARTIFACT_NAME}.zip full_deploy/ sbom.json
          echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "artifact-path=${ARTIFACT_NAME}.zip" >> $GITHUB_OUTPUT

      - name: Upload artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.bundle.outputs.artifact-name }}-${{ github.run_id }}
          path: ${{ steps.bundle.outputs.artifact-path }}
          retention-days: 30

      - name: Publish to Cloudsmith
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          pip install cloudsmith-cli
          cloudsmith push raw ${{ env.CLOUDSMITH_REPO }} \
            ${{ steps.bundle.outputs.artifact-path }} \
            --version="3.6.0" \
            --tags="profile:${{ matrix.profile }},arch:${{ matrix.arch }},fips:${{ matrix.fips }}"

  security-scan:
    needs: build-matrix
    if: always()
    strategy:
      matrix:
        artifact:
          [
            "openssl-linux-gcc11-fips-x86_64",
            "openssl-windows-msvc193-x86_64",
          ]

    uses: sparesparrow/openssl-tools/.github/workflows/reusable-security-scan.yml@master
    with:
      artifact-name: ${{ matrix.artifact }}-${{ github.run_id }}
      fail_on_severity: HIGH,CRITICAL
      upload_sarif: true
    secrets: inherit

  fips-validation:
    if: contains(github.event.head_commit.message, '[fips]') || github.event_name == 'schedule'
    uses: sparesparrow/openssl-tools/.github/workflows/reusable-fips-validation.yml@v1
    with:
      openssl-version: "3.6.0"
      fips-module-version: "3.0.9"
      expected-hash: ${{ vars.FIPS_MODULE_HASH }}

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-matrix, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets/

      - name: Create release bundle
        run: |
          cd release-assets

          # Create platform-specific bundles
          for dir in openssl-*; do
            if [ -d "$dir" ]; then
              # Extract the zip file and create a proper release bundle
              if [ -f "$dir"/*.zip ]; then
                BUNDLE_NAME=$(basename "$dir"/*.zip .zip)
                zip -r "openssl-${GITHUB_REF_NAME}-${BUNDLE_NAME}.zip" "$dir/"
              fi
            fi
          done

          # Create combined SBOM
          if ls sbom-* >/dev/null 2>&1; then
            mkdir -p combined-sbom
            cp sbom-*/*.json combined-sbom/ 2>/dev/null || true
            zip -r "openssl-${GITHUB_REF_NAME}-sbom.zip" combined-sbom/
          fi

          # List all files for release
          ls -la *.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*.zip
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') }}

  notify-status:
    if: always()
    needs: [build-matrix, security-scan, fips-validation]
    runs-on: ubuntu-latest

    steps:
      - name: Build Status Summary
        run: |
          echo "## Build Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Matrix | ${{ needs.build-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| FIPS Validation | ${{ needs.fips-validation.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-matrix.result }}" = "success" ]; then
            echo "✅ All builds completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some builds failed" >> $GITHUB_STEP_SUMMARY
          fi
