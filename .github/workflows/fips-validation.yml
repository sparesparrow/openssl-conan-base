name: FIPS Validation and Certification

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenSSL version to validate'
        required: true
        default: '3.0.12'
      fips_module_version:
        description: 'FIPS module version'
        required: true
        default: '3.0.9'
      certification_path:
        description: 'FIPS certification path'
        required: true
        default: 'fips-140-2'
        type: choice
        options:
          - fips-140-2
          - fips-140-3
          - common-criteria

env:
  CONAN_VERSION: "2.21.0"
  FIPS_MODULE_VERSION: "3.0.9"

jobs:
  validate-fips-configuration:
    name: Validate FIPS Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          pip install conan==${{ env.CONAN_VERSION }}
          conan profile detect --force

      - name: Validate FIPS profiles
        run: |
          echo "🔍 Validating FIPS profiles against CLAUDE.md specifications..."
          
          # Check FIPS-specific profiles
          FIPS_PROFILES=$(find profiles -name "*fips*" -type f)
          echo "Found FIPS profiles: $FIPS_PROFILES"
          
          for profile in $FIPS_PROFILES; do
            echo "Validating profile: $profile"
            
            # Validate profile syntax
            conan profile show "$profile"
            
            # Check for required FIPS settings
            if ! grep -q "enable_fips=True" "$profile"; then
              echo "❌ Profile $profile missing enable_fips=True"
              exit 1
            fi
            
            if ! grep -q "enable_quic=True" "$profile"; then
              echo "❌ Profile $profile missing enable_quic=True"
              exit 1
            fi
            
            echo "✅ Profile $profile validated"
          done

      - name: Validate FIPS module requirements
        run: |
          echo "🔍 Validating FIPS module requirements..."
          
          # Check for FIPS module configuration
          if [ ! -f "profiles/compliance/fips-linux-gcc-release.profile" ]; then
            echo "❌ FIPS compliance profile not found"
            exit 1
          fi
          
          # Validate FIPS module version compatibility
          echo "FIPS module version: ${{ env.FIPS_MODULE_VERSION }}"
          echo "OpenSSL version: ${{ github.event.inputs.version || '3.0.12' }}"
          
          # Check version compatibility matrix
          case "${{ github.event.inputs.version || '3.0.12' }}" in
            "3.0.12")
              if [ "${{ env.FIPS_MODULE_VERSION }}" != "3.0.9" ]; then
                echo "❌ FIPS module version ${{ env.FIPS_MODULE_VERSION }} not compatible with OpenSSL 3.0.12"
                exit 1
              fi
              ;;
            "3.1.0")
              if [ "${{ env.FIPS_MODULE_VERSION }}" != "3.1.0" ]; then
                echo "❌ FIPS module version ${{ env.FIPS_MODULE_VERSION }} not compatible with OpenSSL 3.1.0"
                exit 1
              fi
              ;;
            *)
              echo "⚠️ Unknown OpenSSL version, skipping version compatibility check"
              ;;
          esac
          
          echo "✅ FIPS module requirements validated"

  build-fips-variants:
    name: Build FIPS Variants
    needs: validate-fips-configuration
    strategy:
      matrix:
        include:
          - profile: linux-gcc11-fips
            arch: x86_64
            os: ubuntu-22.04
            fips_module: "3.0.9"
          - profile: fips-linux-gcc-release
            arch: x86_64
            os: ubuntu-22.04
            fips_module: "3.0.9"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          pip install conan==${{ env.CONAN_VERSION }}
          conan profile detect --force

      - name: Install openssl-tools
        run: |
          git clone https://github.com/sparesparrow/openssl-tools.git
          cd openssl-tools
          conan export . openssl-tools/1.2.0@
          conan config install . -sf extensions -tf extensions

      - name: Build FIPS variant
        run: |
          echo "🔨 Building FIPS variant: ${{ matrix.profile }}"
          
          # Build with FIPS enabled
          conan install . \
            --requires="openssl/${{ github.event.inputs.version || '3.0.12' }}" \
            --profile:all=profiles/${{ matrix.profile }} \
            --build=missing \
            --deployer=full_deploy_enhanced \
            --deployer-folder=./deploy

      - name: Validate FIPS module
        run: |
          echo "🔍 Validating FIPS module integrity..."
          
          # Find FIPS module files
          FIPS_FILES=$(find deploy/full_deploy/ -name "*fips*" -o -name "*FIPS*" 2>/dev/null || true)
          
          if [ -z "$FIPS_FILES" ]; then
            echo "❌ No FIPS module files found in build output"
            exit 1
          fi
          
          echo "Found FIPS files: $FIPS_FILES"
          
          # Run comprehensive FIPS validation script
          chmod +x scripts/fips_validation.sh
          ./scripts/fips_validation.sh deploy/full_deploy/
          
          echo "✅ FIPS module validation completed"

      - name: Generate FIPS SBOM
        run: |
          echo "📋 Generating FIPS-specific SBOM..."
          
          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM for FIPS build
          syft deploy/full_deploy/ -o cyclonedx-json > deploy/fips-sbom.json
          
          # Add FIPS-specific metadata
          jq '.metadata.properties += [
            {"name": "fips_enabled", "value": "true"},
            {"name": "fips_module_version", "value": "${{ matrix.fips_module }}"},
            {"name": "certification_path", "value": "${{ github.event.inputs.certification_path || 'fips-140-2' }}"}
          ]' deploy/fips-sbom.json > deploy/fips-sbom-enhanced.json

      - name: Upload FIPS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fips-build-${{ matrix.profile }}-${{ matrix.arch }}-${{ github.run_id }}
          path: |
            deploy/
            fips-sbom-enhanced.json
          retention-days: 30

  publish-fips-packages:
    name: Publish FIPS Packages
    needs: [validate-fips-configuration, build-fips-variants]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download FIPS artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./fips-artifacts/

      - name: Setup Cloudsmith
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          pip install cloudsmith-cli

      - name: Publish FIPS packages to Cloudsmith
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          echo "📤 Publishing FIPS packages to Cloudsmith..."
          
          for artifact_dir in fips-artifacts/fips-build-*; do
            if [ -d "$artifact_dir" ]; then
              PROFILE_NAME=$(basename "$artifact_dir" | sed 's/fips-build-\(.*\)-[^-]*-[0-9]*/\1/')
              ARCH=$(basename "$artifact_dir" | sed 's/fips-build-.*-\([^-]*\)-[0-9]*/\1/')
              
              echo "Publishing FIPS package: $PROFILE_NAME ($ARCH)"
              
              # Create FIPS package bundle
              cd "$artifact_dir"
              zip -r "../fips-package-$PROFILE_NAME-$ARCH.zip" .
              cd ..
              
              # Upload to Cloudsmith with FIPS-specific tags
              cloudsmith push raw sparesparrow-conan/openssl-conan \
                "fips-package-$PROFILE_NAME-$ARCH.zip" \
                --version="${{ github.event.inputs.version || '3.0.12' }}" \
                --tags="profile:$PROFILE_NAME,arch:$ARCH,fips:true,certification:${{ github.event.inputs.certification_path || 'fips-140-2' }},type:fips-validated" \
                --description="FIPS-validated OpenSSL package for $PROFILE_NAME ($ARCH)" \
                --summary="FIPS 140-2 validated OpenSSL build with enhanced security features"
              
              echo "✅ Published FIPS package: $PROFILE_NAME ($ARCH)"
            fi
          done

  sync-with-fips-policy:
    name: Sync with OpenSSL FIPS Policy
    needs: [build-fips-variants]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone openssl-fips-policy
        run: |
          git clone https://github.com/sparesparrow/openssl-fips-policy.git
          cd openssl-fips-policy
          git checkout main

      - name: Sync FIPS configuration
        run: |
          echo "🔄 Syncing FIPS configuration with openssl-fips-policy..."
          
          # Copy FIPS profiles to policy repository
          cp profiles/compliance/fips-linux-gcc-release.profile openssl-fips-policy/profiles/
          cp profiles/linux-gcc11-fips openssl-fips-policy/profiles/
          
          # Update FIPS module version in policy
          echo "FIPS_MODULE_VERSION=${{ env.FIPS_MODULE_VERSION }}" >> openssl-fips-policy/.env
          echo "OPENSSL_VERSION=${{ github.event.inputs.version || '3.0.12' }}" >> openssl-fips-policy/.env

      - name: Commit and push FIPS policy updates
        run: |
          cd openssl-fips-policy
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update FIPS configuration for OpenSSL ${{ github.event.inputs.version || '3.0.12' }}" || exit 0
          git push origin main

  fips-certification-report:
    name: Generate FIPS Certification Report
    needs: [validate-fips-configuration, build-fips-variants, publish-fips-packages]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate FIPS certification report
        run: |
          echo "📊 Generating FIPS certification report..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## FIPS Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration Validation | ${{ needs.validate-fips-configuration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| FIPS Variants Build | ${{ needs.build-fips-variants.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| FIPS Package Publishing | ${{ needs.publish-fips-packages.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-fips-variants.result }}" = "success" ]; then
            echo "✅ **FIPS validation completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**FIPS Packages Published:**" >> $GITHUB_STEP_SUMMARY
            echo "- OpenSSL Version: ${{ github.event.inputs.version || '3.0.12' }}" >> $GITHUB_STEP_SUMMARY
            echo "- FIPS Module Version: ${{ env.FIPS_MODULE_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "- Certification Path: ${{ github.event.inputs.certification_path || 'fips-140-2' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- FIPS packages available in Cloudsmith with 'fips-validated' tag" >> $GITHUB_STEP_SUMMARY
            echo "- Configuration synced with openssl-fips-policy repository" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for cross-domain consumption" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FIPS validation failed** - Check individual job logs for details" >> $GITHUB_STEP_SUMMARY
          fi